import logging
from datetime import datetime, date
from typing import Dict, List, Optional
import json
import os
from dataclasses import dataclass, asdict
from enum import Enum

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ConversationHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π)
BOT_TOKEN = "8087846730:AAF8QNxherHkkpLT2pKNwKJ295ZZaVJu5jQ"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
class States(Enum):
    MENU = 0
    WAYBILL_CREATE = 1
    WAYBILL_DRIVER = 2
    WAYBILL_VEHICLE = 3
    WAYBILL_ROUTE = 4
    WAYBILL_MILEAGE = 5
    REPAIR_CREATE = 6
    REPAIR_VEHICLE = 7
    REPAIR_DESCRIPTION = 8
    REPAIR_COST = 9
    MATERIALS_ADD = 10
    MATERIALS_NAME = 11
    MATERIALS_QUANTITY = 12
    MATERIALS_COST = 13

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
@dataclass
class Vehicle:
    id: str
    brand: str
    model: str
    license_plate: str
    year: int
    mileage: int
    status: str = "available"  # available, in_repair, on_route

@dataclass
class Driver:
    id: str
    name: str
    license_number: str
    phone: str
    status: str = "available"  # available, on_route

@dataclass
class Waybill:
    id: str
    driver_id: str
    vehicle_id: str
    route: str
    start_date: str
    end_date: Optional[str]
    start_mileage: int
    end_mileage: Optional[int]
    status: str = "active"  # active, completed

@dataclass
class Repair:
    id: str
    vehicle_id: str
    description: str
    cost: float
    date: str
    status: str = "completed"

@dataclass
class Material:
    id: str
    name: str
    quantity: int
    unit: str
    cost_per_unit: float
    total_cost: float
    date: str

# –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏
class DataManager:
    def __init__(self):
        self.data_file = "autobase_data.json"
        self.load_data()
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.data_file):
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.vehicles = [Vehicle(**v) for v in data.get('vehicles', [])]
                    self.drivers = [Driver(**d) for d in data.get('drivers', [])]
                    self.waybills = [Waybill(**w) for w in data.get('waybills', [])]
                    self.repairs = [Repair(**r) for r in data.get('repairs', [])]
                    self.materials = [Material(**m) for m in data.get('materials', [])]
            else:
                self.init_sample_data()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.init_sample_data()
    
    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª"""
        try:
            data = {
                'vehicles': [asdict(v) for v in self.vehicles],
                'drivers': [asdict(d) for d in self.drivers],
                'waybills': [asdict(w) for w in self.waybills],
                'repairs': [asdict(r) for r in self.repairs],
                'materials': [asdict(m) for m in self.materials]
            }
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def init_sample_data(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.vehicles = [
            Vehicle("1", "–ö–ê–ú–ê–ó", "65115", "–ê123–ë–í777", 2020, 45000),
            Vehicle("2", "–ì–ê–ó", "3307", "–í456–ì–î777", 2019, 38000),
            Vehicle("3", "–ú–ê–ó", "5440", "–ì789–ï–ñ777", 2021, 25000)
        ]
        
        self.drivers = [
            Driver("1", "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á", "7712345678", "+7-900-123-45-67"),
            Driver("2", "–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á", "7798765432", "+7-900-987-65-43"),
            Driver("3", "–°–∏–¥–æ—Ä–æ–≤ –°–∏–¥–æ—Ä –°–∏–¥–æ—Ä–æ–≤–∏—á", "7755555555", "+7-900-555-55-55")
        ]
        
        self.waybills = []
        self.repairs = []
        self.materials = []
        self.save_data()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö
data_manager = DataManager()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_main_keyboard():
    keyboard = [
        [KeyboardButton("üìã –ü—É—Ç–µ–≤—ã–µ –ª–∏—Å—Ç—ã"), KeyboardButton("üîß –†–µ–º–æ–Ω—Ç")],
        [KeyboardButton("üì¶ –†–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"), KeyboardButton("üìä –û—Ç—á–µ—Ç—ã")],
        [KeyboardButton("üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"), KeyboardButton("üë• –í–æ–¥–∏—Ç–µ–ª–∏")],
        [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¢–°"), KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è")],
        [KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –¢–°"), KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è")],
        [KeyboardButton("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_vehicle_inline_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
    vehicles = data_manager.vehicles
    keyboard = []
    for vehicle in vehicles:
        text = f"{vehicle.brand} {vehicle.model} ({vehicle.license_plate})"
        keyboard.append([InlineKeyboardButton(text, callback_data=f"vehicle_{vehicle.id}")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_driver_select")])
    return InlineKeyboardMarkup(keyboard)

def get_driver_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π"""
    drivers = data_manager.drivers
    keyboard = []
    for driver in drivers:
        keyboard.append([KeyboardButton(driver.name)])
    keyboard.append([KeyboardButton("üîô –ù–∞–∑–∞–¥")])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_driver_inline_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π"""
    drivers = data_manager.drivers
    keyboard = []
    for driver in drivers:
        keyboard.append([InlineKeyboardButton(driver.name, callback_data=f"driver_{driver.id}")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_waybills")])
    return InlineKeyboardMarkup(keyboard)

# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    welcome_text = f"""
üöõ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ò–° "–ê–≤—Ç–æ–±–∞–∑–∞"!

–ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –∞–≤—Ç–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–º –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ–º:
‚Ä¢ –í–µ–¥–µ–Ω–∏–µ –ø—É—Ç–µ–≤—ã—Ö –ª–∏—Å—Ç–æ–≤
‚Ä¢ –£—á–µ—Ç —Ä–µ–º–æ–Ω—Ç–Ω—ã—Ö —Ä–∞–±–æ—Ç
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π
‚Ä¢ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –Ω–∏–∂–µ:
    """
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=get_main_keyboard()
    )
    return States.MENU

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    help_text = """
üîß –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:

1Ô∏è‚É£ –ü—É—Ç–µ–≤—ã–µ –ª–∏—Å—Ç—ã:
   ‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—É—Ç–µ–≤—ã—Ö –ª–∏—Å—Ç–æ–≤
   ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
   ‚Ä¢ –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—É—Ç–µ–≤—ã—Ö –ª–∏—Å—Ç–æ–≤

2Ô∏è‚É£ –†–µ–º–æ–Ω—Ç:
   ‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–º–æ–Ω—Ç–Ω—ã—Ö —Ä–∞–±–æ—Ç
   ‚Ä¢ –£—á–µ—Ç –∑–∞—Ç—Ä–∞—Ç –Ω–∞ —Ä–µ–º–æ–Ω—Ç
   ‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —Ä–µ–º–æ–Ω—Ç–æ–≤

3Ô∏è‚É£ –†–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:
   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
   ‚Ä¢ –£—á–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤
   ‚Ä¢ –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ

4Ô∏è‚É£ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç:
   ‚Ä¢ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¢–°
   ‚Ä¢ –°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
   ‚Ä¢ –ü—Ä–æ–±–µ–≥ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

5Ô∏è‚É£ –í–æ–¥–∏—Ç–µ–ª–∏:
   ‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
   ‚Ä¢ –°—Ç–∞—Ç—É—Å –≤–æ–¥–∏—Ç–µ–ª–µ–π
   ‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

6Ô∏è‚É£ –û—Ç—á–µ—Ç—ã:
   ‚Ä¢ –û—Ç—á–µ—Ç –ø–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
   ‚Ä¢ –û—Ç—á–µ—Ç –ø–æ —Ä–µ–º–æ–Ω—Ç–∞–º
   ‚Ä¢ –û—Ç—á–µ—Ç –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º

–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start
    """
    
    await update.message.reply_text(help_text)

async def waybills_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –ø—É—Ç–µ–≤—ã—Ö –ª–∏—Å—Ç–æ–≤ –¥–ª—è callback"""
    keyboard = [
        [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø—É—Ç–µ–≤–æ–π –ª–∏—Å—Ç", callback_data="waybill_create")],
        [InlineKeyboardButton("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–µ–≤—ã–µ –ª–∏—Å—Ç—ã", callback_data="waybill_active")],
        [InlineKeyboardButton("‚úÖ –ó–∞–∫—Ä—ã—Ç—å –ø—É—Ç–µ–≤–æ–π –ª–∏—Å—Ç", callback_data="waybill_close")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–µ–≤—ã–º–∏ –ª–∏—Å—Ç–∞–º–∏:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—É—Ç–µ–≤—ã—Ö –ª–∏—Å—Ç–æ–≤
async def waybills_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –ø—É—Ç–µ–≤—ã—Ö –ª–∏—Å—Ç–æ–≤"""
    keyboard = [
        [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø—É—Ç–µ–≤–æ–π –ª–∏—Å—Ç", callback_data="waybill_create")],
        [InlineKeyboardButton("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–µ–≤—ã–µ –ª–∏—Å—Ç—ã", callback_data="waybill_active")],
        [InlineKeyboardButton("‚úÖ –ó–∞–∫—Ä—ã—Ç—å –ø—É—Ç–µ–≤–æ–π –ª–∏—Å—Ç", callback_data="waybill_close")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–µ–≤—ã–º–∏ –ª–∏—Å—Ç–∞–º–∏:", reply_markup=reply_markup)

async def create_waybill_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É—Ç–µ–≤–æ–≥–æ –ª–∏—Å—Ç–∞"""
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è:",
        reply_markup=get_driver_inline_keyboard()
    )
    return States.WAYBILL_DRIVER

async def waybill_driver_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –ø—É—Ç–µ–≤–æ–≥–æ –ª–∏—Å—Ç–∞"""
    if update.callback_query:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç inline-–∫–Ω–æ–ø–∫–∏
        await update.callback_query.answer()
        callback_data = update.callback_query.data
        
        if callback_data == "back_to_waybills":
            await waybills_menu(update, context)
            return States.MENU
        
        if callback_data.startswith("driver_"):
            driver_id = callback_data.replace("driver_", "")
            driver = next((d for d in data_manager.drivers if d.id == driver_id), None)
            
            if not driver:
                await update.callback_query.edit_message_text("‚ùå –í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return States.WAYBILL_DRIVER
            
            context.user_data['waybill_driver_id'] = driver.id
            await update.callback_query.edit_message_text(
                f"‚úÖ –í—ã–±—Ä–∞–Ω –≤–æ–¥–∏—Ç–µ–ª—å: {driver.name}\n\nüöõ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ:",
                reply_markup=get_vehicle_inline_keyboard()
            )
            return States.WAYBILL_VEHICLE
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    driver_name = update.message.text
    
    if driver_name == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())
        return States.MENU
    
    # –ù–∞–π—Ç–∏ –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏
    driver = next((d for d in data_manager.drivers if d.name == driver_name), None)
    if not driver:
        await update.message.reply_text("‚ùå –í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return States.WAYBILL_DRIVER
    
    context.user_data['waybill_driver_id'] = driver.id
    await update.message.reply_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω –≤–æ–¥–∏—Ç–µ–ª—å: {driver_name}\n\nüöõ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ:",
        reply_markup=get_vehicle_keyboard()
    )
    return States.WAYBILL_VEHICLE

async def waybill_vehicle_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ–≤–æ–≥–æ –ª–∏—Å—Ç–∞"""
    if update.callback_query:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç inline-–∫–Ω–æ–ø–∫–∏
        await update.callback_query.answer()
        callback_data = update.callback_query.data
        
        if callback_data == "back_to_driver_select":
            await update.callback_query.edit_message_text(
                "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è:",
                reply_markup=get_driver_inline_keyboard()
            )
            return States.WAYBILL_DRIVER
        
        if callback_data.startswith("vehicle_"):
            vehicle_id = callback_data.replace("vehicle_", "")
            vehicle = next((v for v in data_manager.vehicles if v.id == vehicle_id), None)
            
            if not vehicle:
                await update.callback_query.edit_message_text("‚ùå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return States.WAYBILL_VEHICLE
            
            context.user_data['waybill_vehicle_id'] = vehicle.id
            vehicle_text = f"{vehicle.brand} {vehicle.model} ({vehicle.license_plate})"
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ –º–∞—Ä—à—Ä—É—Ç–∞
            await update.callback_query.edit_message_text(
                f"‚úÖ –í—ã–±—Ä–∞–Ω —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {vehicle_text}\n\nüìç –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç:"
            )
            await update.callback_query.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:",
                reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîô –ù–∞–∑–∞–¥")]], resize_keyboard=True)
            )
            return States.WAYBILL_ROUTE
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    vehicle_text = update.message.text
    
    if vehicle_text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text("üë§ –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è:", reply_markup=get_driver_keyboard())
        return States.WAYBILL_DRIVER
    
    # –ù–∞–π—Ç–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –ø–æ —Ç–µ–∫—Å—Ç—É
    vehicle = None
    for v in data_manager.vehicles:
        if f"{v.brand} {v.model} ({v.license_plate})" == vehicle_text:
            vehicle = v
            break
    
    if not vehicle:
        await update.message.reply_text("‚ùå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return States.WAYBILL_VEHICLE
    
    context.user_data['waybill_vehicle_id'] = vehicle.id
    await update.message.reply_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {vehicle_text}\n\nüìç –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç:",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîô –ù–∞–∑–∞–¥")]], resize_keyboard=True)
    )
    return States.WAYBILL_ROUTE

async def waybill_route_entered(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–≤–æ–¥ –º–∞—Ä—à—Ä—É—Ç–∞"""
    route = update.message.text
    
    if route == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text("üöõ –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ:", reply_markup=get_vehicle_keyboard())
        return States.WAYBILL_VEHICLE
    
    context.user_data['waybill_route'] = route
    await update.message.reply_text(
        f"‚úÖ –ú–∞—Ä—à—Ä—É—Ç: {route}\n\nüìè –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–±–µ–≥ (–∫–º):",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîô –ù–∞–∑–∞–¥")]], resize_keyboard=True)
    )
    return States.WAYBILL_MILEAGE

async def waybill_mileage_entered(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–≤–æ–¥ –ø—Ä–æ–±–µ–≥–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—É—Ç–µ–≤–æ–≥–æ –ª–∏—Å—Ç–∞"""
    mileage_text = update.message.text
    vehicle.status = "on_route"
    driver.status = "on_route"
    
    if mileage_text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text("üìç –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç:", reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîô –ù–∞–∑–∞–¥")]], resize_keyboard=True))
        return States.WAYBILL_ROUTE
    
    try:
        mileage = int(mileage_text)
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ø—Ä–æ–±–µ–≥–∞.")
        return States.WAYBILL_MILEAGE
    
    # –°–æ–∑–¥–∞—Ç—å –ø—É—Ç–µ–≤–æ–π –ª–∏—Å—Ç
    waybill_id = str(len(data_manager.waybills) + 1)
    waybill = Waybill(
        id=waybill_id,
        driver_id=context.user_data['waybill_driver_id'],
        vehicle_id=context.user_data['waybill_vehicle_id'],
        route=context.user_data['waybill_route'],
        start_date=datetime.now().strftime("%Y-%m-%d %H:%M"),
        end_date=None,
        start_mileage=mileage,
        end_mileage=None,
        status="active"
    )
    
    data_manager.waybills.append(waybill)
    data_manager.save_data()
    
    # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    driver = next(d for d in data_manager.drivers if d.id == waybill.driver_id)
    vehicle = next(v for v in data_manager.vehicles if v.id == waybill.vehicle_id)
    
    success_text = f"""
‚úÖ –ü—É—Ç–µ–≤–æ–π –ª–∏—Å—Ç ‚Ññ{waybill_id} —Å–æ–∑–¥–∞–Ω!

üë§ –í–æ–¥–∏—Ç–µ–ª—å: {driver.name}
üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {vehicle.brand} {vehicle.model} ({vehicle.license_plate})
üìç –ú–∞—Ä—à—Ä—É—Ç: {waybill.route}
üìÖ –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞: {waybill.start_date}
üìè –ù–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–±–µ–≥: {waybill.start_mileage} –∫–º
    """
    
    await update.message.reply_text(success_text, reply_markup=get_main_keyboard())
    
    # –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    return States.MENU

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
async def vehicles_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ"""
    if not data_manager.vehicles:
        await update.message.reply_text("üì≠ –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –ø—É—Å—Ç.")
        return
    
    text = "üöõ –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤:\n\n"
    for vehicle in data_manager.vehicles:
        status_emoji = "üü¢" if vehicle.status == "available" else "üî¥" if vehicle.status == "in_repair" else "üü°"
        text += f"{status_emoji} {vehicle.brand} {vehicle.model}\n"
        text += f"   üìã –ì–æ—Å. –Ω–æ–º–µ—Ä: {vehicle.license_plate}\n"
        text += f"   üìÖ –ì–æ–¥: {vehicle.year}\n"
        text += f"   üìè –ü—Ä–æ–±–µ–≥: {vehicle.mileage:,} –∫–º\n"
        text += f"   üìä –°—Ç–∞—Ç—É—Å: {vehicle.status}\n\n"
    
    await update.message.reply_text(text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π
async def drivers_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–¥–∏—Ç–µ–ª—è—Ö"""
    if not data_manager.drivers:
        await update.message.reply_text("üì≠ –°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return
    
    text = "üë• –°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π:\n\n"
    for driver in data_manager.drivers:
        status_emoji = "üü¢" if driver.status == "available" else "üî¥"
        text += f"{status_emoji} {driver.name}\n"
        text += f"   üìã –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ: {driver.license_number}\n"
        text += f"   üìû –¢–µ–ª–µ—Ñ–æ–Ω: {driver.phone}\n"
        text += f"   üìä –°—Ç–∞—Ç—É—Å: {driver.status}\n\n"
    
    await update.message.reply_text(text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–º–æ–Ω—Ç–∞
async def repairs_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é —Ä–µ–º–æ–Ω—Ç–Ω—ã—Ö —Ä–∞–±–æ—Ç"""
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–º–æ–Ω—Ç", callback_data="repair_create")],
        [InlineKeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è —Ä–µ–º–æ–Ω—Ç–æ–≤", callback_data="repair_history")],
        [InlineKeyboardButton("üí∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—Ç—Ä–∞—Ç", callback_data="repair_stats")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–Ω—ã–º–∏ —Ä–∞–±–æ—Ç–∞–º–∏:", reply_markup=reply_markup)

async def repair_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò—Å—Ç–æ—Ä–∏—è —Ä–µ–º–æ–Ω—Ç–æ–≤"""
    if not data_manager.repairs:
        text = "üì≠ –ò—Å—Ç–æ—Ä–∏—è —Ä–µ–º–æ–Ω—Ç–æ–≤ –ø—É—Å—Ç–∞."
    else:
        text = "üîß –ò—Å—Ç–æ—Ä–∏—è —Ä–µ–º–æ–Ω—Ç–Ω—ã—Ö —Ä–∞–±–æ—Ç:\n\n"
        total_cost = 0
        for repair in data_manager.repairs:
            vehicle = next((v for v in data_manager.vehicles if v.id == repair.vehicle_id), None)
            vehicle_info = f"{vehicle.brand} {vehicle.model} ({vehicle.license_plate})" if vehicle else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¢–°"
            text += f"üÜî –†–µ–º–æ–Ω—Ç ‚Ññ{repair.id}\n"
            text += f"üöõ –¢–°: {vehicle_info}\n"
            text += f"üîß –†–∞–±–æ—Ç—ã: {repair.description}\n"
            text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {repair.cost:,.2f} ‚ÇΩ\n"
            text += f"üìÖ –î–∞—Ç–∞: {repair.date}\n\n"
            total_cost += repair.cost
        
        text += f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ —Ä–µ–º–æ–Ω—Ç–æ–≤: {total_cost:,.2f} ‚ÇΩ"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_repairs")]]
    await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
async def materials_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é —Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª", callback_data="material_add")],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤", callback_data="material_list")],
        [InlineKeyboardButton("üí∞ –û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã", callback_data="material_costs")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏:", reply_markup=reply_markup)

async def materials_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ —Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
    if not data_manager.materials:
        text = "üì≠ –°–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø—É—Å—Ç."
    else:
        text = "üì¶ –†–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:\n\n"
        total_cost = 0
        for material in data_manager.materials:
            text += f"üì¶ {material.name}\n"
            text += f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {material.quantity} {material.unit}\n"
            text += f"üí∞ –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {material.cost_per_unit:,.2f} ‚ÇΩ\n"
            text += f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {material.total_cost:,.2f} ‚ÇΩ\n"
            text += f"üìÖ –î–∞—Ç–∞: {material.date}\n\n"
            total_cost += material.total_cost
        
        text += f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {total_cost:,.2f} ‚ÇΩ"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_materials")]]
    await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

async def create_repair_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –æ —Ä–µ–º–æ–Ω—Ç–µ"""
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        "üöõ –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞:",
        reply_markup=get_vehicle_inline_keyboard()
    )
    return States.REPAIR_VEHICLE

async def repair_vehicle_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞"""
    if update.callback_query:
        await update.callback_query.answer()
        callback_data = update.callback_query.data
        
        if callback_data == "back_to_repairs":
            await repairs_menu_callback(update, context)
            return States.MENU
        
        if callback_data.startswith("vehicle_"):
            vehicle_id = callback_data.replace("vehicle_", "")
            vehicle = next((v for v in data_manager.vehicles if v.id == vehicle_id), None)
            
            if not vehicle:
                await update.callback_query.edit_message_text("‚ùå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return States.REPAIR_VEHICLE
            
            context.user_data['repair_vehicle_id'] = vehicle.id
            vehicle_text = f"{vehicle.brand} {vehicle.model} ({vehicle.license_plate})"
            
            await update.callback_query.edit_message_text(
                f"‚úÖ –í—ã–±—Ä–∞–Ω —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {vehicle_text}\n\nüîß –û–ø–∏—à–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã:"
            )
            await update.callback_query.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–Ω—ã—Ö —Ä–∞–±–æ—Ç:",
                reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîô –ù–∞–∑–∞–¥")]], resize_keyboard=True)
            )
            return States.REPAIR_DESCRIPTION

async def repair_description_entered(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–µ–º–æ–Ω—Ç–∞"""
    description = update.message.text
    
    if description == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())
        return States.MENU
    
    context.user_data['repair_description'] = description
    await update.message.reply_text(
        f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\nüí∞ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞ (‚ÇΩ):",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîô –ù–∞–∑–∞–¥")]], resize_keyboard=True)
    )
    return States.REPAIR_COST

async def repair_cost_entered(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–≤–æ–¥ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–µ–º–æ–Ω—Ç–∞"""
    cost_text = update.message.text
    
    if cost_text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–Ω—ã—Ö —Ä–∞–±–æ—Ç:", reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîô –ù–∞–∑–∞–¥")]], resize_keyboard=True))
        return States.REPAIR_DESCRIPTION
    
    try:
        cost = float(cost_text.replace(',', '.'))
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        return States.REPAIR_COST
    
    # –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –æ —Ä–µ–º–æ–Ω—Ç–µ
    repair_id = str(len(data_manager.repairs) + 1)
    repair = Repair(
        id=repair_id,
        vehicle_id=context.user_data['repair_vehicle_id'],
        description=context.user_data['repair_description'],
        cost=cost,
        date=datetime.now().strftime("%Y-%m-%d %H:%M"),
        status="completed"
    )
    
    data_manager.repairs.append(repair)
    data_manager.save_data()
    
    # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    vehicle = next(v for v in data_manager.vehicles if v.id == repair.vehicle_id)
    
    success_text = f"""
‚úÖ –†–µ–º–æ–Ω—Ç ‚Ññ{repair_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!

üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {vehicle.brand} {vehicle.model} ({vehicle.license_plate})
üîß –†–∞–±–æ—Ç—ã: {repair.description}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {repair.cost:,.2f} ‚ÇΩ
üìÖ –î–∞—Ç–∞: {repair.date}
    """
    
    await update.message.reply_text(success_text, reply_markup=get_main_keyboard())
    
    # –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    return States.MENU

async def repairs_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é —Ä–µ–º–æ–Ω—Ç–∞ –¥–ª—è callback"""
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–º–æ–Ω—Ç", callback_data="repair_create")],
        [InlineKeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è —Ä–µ–º–æ–Ω—Ç–æ–≤", callback_data="repair_history")],
        [InlineKeyboardButton("üí∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—Ç—Ä–∞—Ç", callback_data="repair_stats")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text("üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–Ω—ã–º–∏ —Ä–∞–±–æ—Ç–∞–º–∏:", reply_markup=reply_markup)

async def materials_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è callback"""
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª", callback_data="material_add")],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤", callback_data="material_list")],
        [InlineKeyboardButton("üí∞ –û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã", callback_data="material_costs")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text("üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
async def reports_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤"""
    keyboard = [
        [InlineKeyboardButton("üöõ –û—Ç—á–µ—Ç –ø–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É", callback_data="report_vehicles")],
        [InlineKeyboardButton("üîß –û—Ç—á–µ—Ç –ø–æ —Ä–µ–º–æ–Ω—Ç–∞–º", callback_data="report_repairs")],
        [InlineKeyboardButton("üì¶ –û—Ç—á–µ—Ç –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º", callback_data="report_materials")],
        [InlineKeyboardButton("üìã –û—Ç—á–µ—Ç –ø–æ –ø—É—Ç–µ–≤—ã–º –ª–∏—Å—Ç–∞–º", callback_data="report_waybills")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE): 
    
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "waybill_create":
        return await create_waybill_start(update, context)
    elif query.data == "waybill_active":
        active_waybills = [w for w in data_manager.waybills if w.status == "active"]
        if not active_waybills:
            await query.edit_message_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—É—Ç–µ–≤—ã—Ö –ª–∏—Å—Ç–æ–≤.")
            return
        
        text = "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–µ–≤—ã–µ –ª–∏—Å—Ç—ã:\n\n"
        for waybill in active_waybills:
            driver = next(d for d in data_manager.drivers if d.id == waybill.driver_id)
            vehicle = next(v for v in data_manager.vehicles if v.id == waybill.vehicle_id)
            text += f"üÜî –ü—É—Ç–µ–≤–æ–π –ª–∏—Å—Ç ‚Ññ{waybill.id}\n"
            text += f"üë§ –í–æ–¥–∏—Ç–µ–ª—å: {driver.name}\n"
            text += f"üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {vehicle.license_plate}\n"
            text += f"üìç –ú–∞—Ä—à—Ä—É—Ç: {waybill.route}\n"
            text += f"üìÖ –î–∞—Ç–∞: {waybill.start_date}\n\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_waybills")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        
    elif query.data == "repair_create":
        return await create_repair_start(update, context)
    elif query.data == "repair_history":
        return await repair_history(update, context)
    elif query.data == "material_list":
        return await materials_list(update, context)
    elif query.data == "back_to_menu":
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=get_main_keyboard())
        await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    elif query.data == "back_to_waybills":
        await waybills_menu_callback(update, context)
    elif query.data == "back_to_repairs":
        await repairs_menu_callback(update, context)
    elif query.data == "back_to_materials":
        await materials_menu_callback(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text
    
    if text == "üìã –ü—É—Ç–µ–≤—ã–µ –ª–∏—Å—Ç—ã":
        await waybills_menu(update, context)
    elif text == "üîß –†–µ–º–æ–Ω—Ç":
        await repairs_menu(update, context)
    elif text == "üì¶ –†–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã":
        await materials_menu(update, context)
    elif text == "üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        await vehicles_info(update, context)
    elif text == "üë• –í–æ–¥–∏—Ç–µ–ª–∏":
        await drivers_info(update, context)
    elif text == "üìä –û—Ç—á–µ—Ç—ã":
        await reports_menu(update, context)
    elif text == "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞":
        await help_command(update, context)
    elif text.startswith("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è"):
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –§–ò–û, –Ω–æ–º–µ—Ä –ø—Ä–∞–≤ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
        context.user_data["action"] = "add_driver"
    elif text.startswith("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¢–°"):
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É, –º–æ–¥–µ–ª—å, –Ω–æ–º–µ—Ä, –≥–æ–¥ –∏ –ø—Ä–æ–±–µ–≥ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
        context.user_data["action"] = "add_vehicle"
    elif text.startswith("‚ùå –£–¥–∞–ª–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è"):
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        context.user_data["action"] = "delete_driver"
    elif text.startswith("‚ùå –£–¥–∞–ª–∏—Ç—å –¢–°"):
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–° –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        context.user_data["action"] = "delete_vehicle"
    elif "," in text:
        action = context.user_data.get("action")
        parts = [p.strip() for p in text.split(",")]

        if action == "add_driver" and len(parts) == 3:
            driver = Driver(id=str(len(data_manager.drivers)+1), name=parts[0], license_number=parts[1], phone=parts[2])
            data_manager.drivers.append(driver)
            data_manager.save_data()
            await update.message.reply_text(f"‚úÖ –í–æ–¥–∏—Ç–µ–ª—å {driver.name} –¥–æ–±–∞–≤–ª–µ–Ω.")
        elif action == "add_vehicle" and len(parts) == 5:
            try:
                vehicle = Vehicle(
                    id=str(len(data_manager.vehicles)+1),
                    brand=parts[0], model=parts[1],
                    license_plate=parts[2],
                    year=int(parts[3]), mileage=int(parts[4])
                )
                data_manager.vehicles.append(vehicle)
                data_manager.save_data()
                await update.message.reply_text(f"‚úÖ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç {vehicle.brand} {vehicle.model} –¥–æ–±–∞–≤–ª–µ–Ω.")
            except:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¢–°.")
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        context.user_data.clear()
    elif context.user_data.get("action") == "delete_driver":
        name = text.strip()
        data_manager.drivers = [d for d in data_manager.drivers if d.name != name]
        data_manager.save_data()
        await update.message.reply_text(f"‚úÖ –í–æ–¥–∏—Ç–µ–ª—å {name} —É–¥–∞–ª—ë–Ω (–µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω).")
        context.user_data.clear()
    elif context.user_data.get("action") == "delete_vehicle":
        plate = text.strip()
        data_manager.vehicles = [v for v in data_manager.vehicles if v.license_plate != plate]
        data_manager.save_data()
        await update.message.reply_text(f"‚úÖ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å –Ω–æ–º–µ—Ä–æ–º {plate} —É–¥–∞–ª—ë–Ω (–µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω).")
        context.user_data.clear()

    else:
        await update.message.reply_text("‚ùì –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler –¥–ª—è –ø—É—Ç–µ–≤—ã—Ö –ª–∏—Å—Ç–æ–≤
    waybill_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start),
            CallbackQueryHandler(create_waybill_start, pattern="waybill_create")
        ],
        states={
            States.MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message),
                CallbackQueryHandler(button_callback)
            ],
            States.WAYBILL_DRIVER: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, waybill_driver_selected),
                CallbackQueryHandler(waybill_driver_selected)
            ],
            States.WAYBILL_VEHICLE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, waybill_vehicle_selected),
                CallbackQueryHandler(waybill_vehicle_selected)
            ],
            States.WAYBILL_ROUTE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, waybill_route_entered)
            ],
            States.WAYBILL_MILEAGE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, waybill_mileage_entered)
            ],
            States.REPAIR_VEHICLE: [
                CallbackQueryHandler(repair_vehicle_selected)
            ],
            States.REPAIR_DESCRIPTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, repair_description_entered)
            ],
            States.REPAIR_COST: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, repair_cost_entered)
            ],
        },
        fallbacks=[CommandHandler('start', start)]
    )
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(waybill_handler)
    application.add_handler(CommandHandler('help', help_command))
    application.add_handler(CallbackQueryHandler(button_callback))
# –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∫–æ–¥–∞ —Å —Ñ—É–Ω–∫—Ü–∏–∏ main()

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def get_vehicle_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
    vehicles = data_manager.vehicles
    keyboard = []
    for vehicle in vehicles:
        text = f"{vehicle.brand} {vehicle.model} ({vehicle.license_plate})"
        keyboard.append([KeyboardButton(text)])
    keyboard.append([KeyboardButton("üîô –ù–∞–∑–∞–¥")])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
async def create_material_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
    await update.callback_query.answer()
    await update.callback_query.edit_message_text("üì¶ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:")
    await update.callback_query.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîô –ù–∞–∑–∞–¥")]], resize_keyboard=True)
    )
    return States.MATERIALS_NAME

async def material_name_entered(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
    name = update.message.text
    
    if name == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())
        return States.MENU
    
    context.user_data['material_name'] = name
    await update.message.reply_text(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n\nüìä –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîô –ù–∞–∑–∞–¥")]], resize_keyboard=True)
    )
    return States.MATERIALS_QUANTITY

async def material_quantity_entered(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
    quantity_text = update.message.text
    
    if quantity_text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:", reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîô –ù–∞–∑–∞–¥")]], resize_keyboard=True))
        return States.MATERIALS_NAME
    
    try:
        quantity = int(quantity_text)
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
        return States.MATERIALS_QUANTITY
    
    context.user_data['material_quantity'] = quantity
    await update.message.reply_text(
        f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n\nüí∞ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –µ–¥–∏–Ω–∏—Ü—É (‚ÇΩ):",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîô –ù–∞–∑–∞–¥")]], resize_keyboard=True)
    )
    return States.MATERIALS_COST

async def material_cost_entered(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–≤–æ–¥ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
    cost_text = update.message.text
    
    if cost_text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text("üìä –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîô –ù–∞–∑–∞–¥")]], resize_keyboard=True))
        return States.MATERIALS_QUANTITY
    
    try:
        cost_per_unit = float(cost_text.replace(',', '.'))
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å.")
        return States.MATERIALS_COST
    
    # –°–æ–∑–¥–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª
    material_id = str(len(data_manager.materials) + 1)
    quantity = context.user_data['material_quantity']
    total_cost = quantity * cost_per_unit
    
    material = Material(
        id=material_id,
        name=context.user_data['material_name'],
        quantity=quantity,
        unit="—à—Ç",  # –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
        cost_per_unit=cost_per_unit,
        total_cost=total_cost,
        date=datetime.now().strftime("%Y-%m-%d %H:%M")
    )
    
    data_manager.materials.append(material)
    data_manager.save_data()
    
    success_text = f"""
‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω!

üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {material.name}
üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {material.quantity} {material.unit}
üí∞ –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {material.cost_per_unit:,.2f} ‚ÇΩ
üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {material.total_cost:,.2f} ‚ÇΩ
üìÖ –î–∞—Ç–∞: {material.date}
    """
    
    await update.message.reply_text(success_text, reply_markup=get_main_keyboard())
    
    # –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    return States.MENU

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
async def report_vehicles(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç—á–µ—Ç –ø–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É"""
    if not data_manager.vehicles:
        text = "üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ."
    else:
        text = "üöõ –û–¢–ß–ï–¢ –ü–û –¢–†–ê–ù–°–ü–û–†–¢–£\n\n"
        available_count = 0
        in_repair_count = 0
        on_route_count = 0
        total_mileage = 0
        
        for vehicle in data_manager.vehicles:
            if vehicle.status == "available":
                available_count += 1
            elif vehicle.status == "in_repair":
                in_repair_count += 1
            elif vehicle.status == "on_route":
                on_route_count += 1
            total_mileage += vehicle.mileage
        
        text += f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n"
        text += f"‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¢–°: {len(data_manager.vehicles)}\n"
        text += f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ: {available_count}\n"
        text += f"‚Ä¢ –í —Ä–µ–º–æ–Ω—Ç–µ: {in_repair_count}\n"
        text += f"‚Ä¢ –ù–∞ –º–∞—Ä—à—Ä—É—Ç–µ: {on_route_count}\n"
        text += f"‚Ä¢ –û–±—â–∏–π –ø—Ä–æ–±–µ–≥: {total_mileage:,} –∫–º\n"
        text += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–±–µ–≥: {total_mileage//len(data_manager.vehicles):,} –∫–º\n\n"
        
        text += "üìã –î–ï–¢–ê–õ–ò:\n"
        for vehicle in data_manager.vehicles:
            status_emoji = "üü¢" if vehicle.status == "available" else "üî¥" if vehicle.status == "in_repair" else "üü°"
            text += f"{status_emoji} {vehicle.brand} {vehicle.model} ({vehicle.license_plate})\n"
            text += f"   üìÖ {vehicle.year} –≥., üìè {vehicle.mileage:,} –∫–º\n"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_reports")]]
    await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

async def report_repairs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç—á–µ—Ç –ø–æ —Ä–µ–º–æ–Ω—Ç–∞–º"""
    if not data_manager.repairs:
        text = "üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–º–æ–Ω—Ç–∞—Ö."
    else:
        text = "üîß –û–¢–ß–ï–¢ –ü–û –†–ï–ú–û–ù–¢–ê–ú\n\n"
        total_cost = sum(repair.cost for repair in data_manager.repairs)
        avg_cost = total_cost / len(data_manager.repairs)
        
        text += f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n"
        text += f"‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–º–æ–Ω—Ç–æ–≤: {len(data_manager.repairs)}\n"
        text += f"‚Ä¢ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost:,.2f} ‚ÇΩ\n"
        text += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {avg_cost:,.2f} ‚ÇΩ\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
        repairs_by_vehicle = {}
        for repair in data_manager.repairs:
            if repair.vehicle_id not in repairs_by_vehicle:
                repairs_by_vehicle[repair.vehicle_id] = []
            repairs_by_vehicle[repair.vehicle_id].append(repair)
        
        text += "üìã –ü–û –¢–†–ê–ù–°–ü–û–†–¢–£:\n"
        for vehicle_id, repairs in repairs_by_vehicle.items():
            vehicle = next((v for v in data_manager.vehicles if v.id == vehicle_id), None)
            if vehicle:
                vehicle_cost = sum(r.cost for r in repairs)
                text += f"üöõ {vehicle.brand} {vehicle.model} ({vehicle.license_plate})\n"
                text += f"   –†–µ–º–æ–Ω—Ç–æ–≤: {len(repairs)}, –°—É–º–º–∞: {vehicle_cost:,.2f} ‚ÇΩ\n"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_reports")]]
    await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

async def report_materials(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç—á–µ—Ç –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º"""
    if not data_manager.materials:
        text = "üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö."
    else:
        text = "üì¶ –û–¢–ß–ï–¢ –ü–û –ú–ê–¢–ï–†–ò–ê–õ–ê–ú\n\n"
        total_cost = sum(material.total_cost for material in data_manager.materials)
        total_items = len(data_manager.materials)
        
        text += f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n"
        text += f"‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π: {total_items}\n"
        text += f"‚Ä¢ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost:,.2f} ‚ÇΩ\n"
        
        if total_items > 0:
            avg_cost = total_cost / total_items
            text += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏: {avg_cost:,.2f} ‚ÇΩ\n"
        
        text += "\nüìã –°–ê–ú–´–ï –î–û–†–û–ì–ò–ï –ü–û–ó–ò–¶–ò–ò:\n"
        sorted_materials = sorted(data_manager.materials, key=lambda x: x.total_cost, reverse=True)[:5]
        for material in sorted_materials:
            text += f"üì¶ {material.name}: {material.total_cost:,.2f} ‚ÇΩ\n"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_reports")]]
    await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

async def report_waybills(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç—á–µ—Ç –ø–æ –ø—É—Ç–µ–≤—ã–º –ª–∏—Å—Ç–∞–º"""
    if not data_manager.waybills:
        text = "üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—É—Ç–µ–≤—ã—Ö –ª–∏—Å—Ç–∞—Ö."
    else:
        text = "üìã –û–¢–ß–ï–¢ –ü–û –ü–£–¢–ï–í–´–ú –õ–ò–°–¢–ê–ú\n\n"
        active_count = len([w for w in data_manager.waybills if w.status == "active"])
        completed_count = len([w for w in data_manager.waybills if w.status == "completed"])
        
        text += f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n"
        text += f"‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(data_manager.waybills)}\n"
        text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_count}\n"
        text += f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {completed_count}\n\n"
        
        # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –ø—Ä–æ–±–µ–≥–∞
        total_mileage = 0
        for waybill in data_manager.waybills:
            if waybill.end_mileage is not None and waybill.start_mileage is not None:
                total_mileage += waybill.end_mileage - waybill.start_mileage
        
        text += f"üìè –û–±—â–∏–π –ø—Ä–æ–±–µ–≥ –ø–æ –ø—É—Ç–µ–≤—ã–º –ª–∏—Å—Ç–∞–º: {total_mileage:,} –∫–º\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º
        waybills_by_driver = {}
        for waybill in data_manager.waybills:
            if waybill.driver_id not in waybills_by_driver:
                waybills_by_driver[waybill.driver_id] = 0
            waybills_by_driver[waybill.driver_id] += 1
        
        text += "üë• –ü–û –í–û–î–ò–¢–ï–õ–Ø–ú:\n"
        for driver_id, count in waybills_by_driver.items():
            driver = next((d for d in data_manager.drivers if d.id == driver_id), None)
            if driver:
                text += f"üë§ {driver.name}: {count} –ø—É—Ç–µ–≤—ã—Ö –ª–∏—Å—Ç–æ–≤\n"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_reports")]]
    await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
async def button_callback_extended(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–æ–≤
    if query.data == "report_vehicles":
        return await report_vehicles(update, context)
    elif query.data == "report_repairs":
        return await report_repairs(update, context)
    elif query.data == "report_materials":
        return await report_materials(update, context)
    elif query.data == "report_waybills":
        return await report_waybills(update, context)
    elif query.data == "back_to_reports":
        keyboard = [
            [InlineKeyboardButton("üöõ –û—Ç—á–µ—Ç –ø–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É", callback_data="report_vehicles")],
            [InlineKeyboardButton("üîß –û—Ç—á–µ—Ç –ø–æ —Ä–µ–º–æ–Ω—Ç–∞–º", callback_data="report_repairs")],
            [InlineKeyboardButton("üì¶ –û—Ç—á–µ—Ç –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º", callback_data="report_materials")],
            [InlineKeyboardButton("üìã –û—Ç—á–µ—Ç –ø–æ –ø—É—Ç–µ–≤—ã–º –ª–∏—Å—Ç–∞–º", callback_data="report_waybills")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:", reply_markup=reply_markup)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    elif query.data == "material_add":
        return await create_material_start(update, context)
    elif query.data == "material_costs":
        if not data_manager.materials:
            text = "üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö."
        else:
            total_cost = sum(material.total_cost for material in data_manager.materials)
            text = f"üí∞ –û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã: {total_cost:,.2f} ‚ÇΩ"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_materials")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–º–æ–Ω—Ç–æ–≤
    elif query.data == "repair_stats":
        if not data_manager.repairs:
            text = "üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–º–æ–Ω—Ç–∞—Ö."
        else:
            total_cost = sum(repair.cost for repair in data_manager.repairs)
            avg_cost = total_cost / len(data_manager.repairs)
            text = f"üîß –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ï–ú–û–ù–¢–û–í\n\n"
            text += f"üí∞ –û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã: {total_cost:,.2f} ‚ÇΩ\n"
            text += f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–º–æ–Ω—Ç–æ–≤: {len(data_manager.repairs)}\n"
            text += f"üí∞ –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {avg_cost:,.2f} ‚ÇΩ"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_repairs")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—É—Ç–µ–≤—ã—Ö –ª–∏—Å—Ç–æ–≤
    elif query.data == "waybill_close":
        active_waybills = [w for w in data_manager.waybills if w.status == "active"]
        if not active_waybills:
            await query.edit_message_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—É—Ç–µ–≤—ã—Ö –ª–∏—Å—Ç–æ–≤ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è.")
            return
        
        keyboard = []
        for waybill in active_waybills:
            driver = next((d for d in data_manager.drivers if d.id == waybill.driver_id), None)
            vehicle = next((v for v in data_manager.vehicles if v.id == waybill.vehicle_id), None)
            text = f"‚Ññ{waybill.id} - {driver.name if driver else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'} ({vehicle.license_plate if vehicle else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¢–°'})"
            keyboard.append([InlineKeyboardButton(text, callback_data=f"close_waybill_{waybill.id}")])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_waybills")])
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É—Ç–µ–≤–æ–π –ª–∏—Å—Ç –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—É—Ç–µ–≤–æ–≥–æ –ª–∏—Å—Ç–∞
    elif query.data.startswith("close_waybill_"):
        waybill_id = query.data.replace("close_waybill_", "")
        waybill = next((w for w in data_manager.waybills if w.id == waybill_id), None)
        vehicle.status = "available"
        driver.status = "available"
        
        if waybill:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø—Ä–æ–±–µ–≥–∞
            # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
            waybill.status = "completed"
            waybill.end_date = datetime.now().strftime("%Y-%m-%d %H:%M")
            waybill.end_mileage = waybill.start_mileage + 100  # TODO: –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤
            vehicle.status = "available"
            driver.status = "available"
            waybill.end_date = datetime.now().strftime("%Y-%m-%d %H:%M")
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø—Ä–æ–±–µ–≥–∞
            
            data_manager.save_data()
            
            driver = next((d for d in data_manager.drivers if d.id == waybill.driver_id), None)
            vehicle = next((v for v in data_manager.vehicles if v.id == waybill.vehicle_id), None)
            
            success_text = f"""
‚úÖ –ü—É—Ç–µ–≤–æ–π –ª–∏—Å—Ç ‚Ññ{waybill.id} –∑–∞–∫—Ä—ã—Ç!

üë§ –í–æ–¥–∏—Ç–µ–ª—å: {driver.name if driver else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}
üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {vehicle.license_plate if vehicle else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¢–°'}
üìÖ –ó–∞–∫—Ä—ã—Ç: {waybill.end_date}
            """
            
            keyboard = [[InlineKeyboardButton("üîô –ö –ø—É—Ç–µ–≤—ã–º –ª–∏—Å—Ç–∞–º", callback_data="back_to_waybills")]]
            await query.edit_message_text(success_text, reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            await query.edit_message_text("‚ùå –ü—É—Ç–µ–≤–æ–π –ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler
    conversation_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start),
            CallbackQueryHandler(create_waybill_start, pattern="waybill_create"),
            CallbackQueryHandler(create_repair_start, pattern="repair_create"),
            CallbackQueryHandler(create_material_start, pattern="material_add")
        ],
        states={
            States.MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message),
                CallbackQueryHandler(button_callback),
                CallbackQueryHandler(button_callback_extended)
            ],
            States.WAYBILL_DRIVER: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, waybill_driver_selected),
                CallbackQueryHandler(waybill_driver_selected)
            ],
            States.WAYBILL_VEHICLE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, waybill_vehicle_selected),
                CallbackQueryHandler(waybill_vehicle_selected)
            ],
            States.WAYBILL_ROUTE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, waybill_route_entered)
            ],
            States.WAYBILL_MILEAGE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, waybill_mileage_entered)
            ],
            States.REPAIR_VEHICLE: [
                CallbackQueryHandler(repair_vehicle_selected)
            ],
            States.REPAIR_DESCRIPTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, repair_description_entered)
            ],
            States.REPAIR_COST: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, repair_cost_entered)
            ],
            States.MATERIALS_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, material_name_entered)
            ],
            States.MATERIALS_QUANTITY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, material_quantity_entered)
            ],
            States.MATERIALS_COST: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, material_cost_entered)
            ],
        },
        fallbacks=[CommandHandler('start', start)]
    )
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(conversation_handler)
    application.add_handler(CommandHandler('help', help_command))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(CallbackQueryHandler(button_callback_extended))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("üöõ –ë–æ—Ç –ò–° '–ê–≤—Ç–æ–±–∞–∑–∞' –∑–∞–ø—É—â–µ–Ω...")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()